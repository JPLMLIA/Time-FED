# This file was generated by mlky
# Usage: --config [this file].yml --patch "generated" --defs definitions.yml
#
# mlky uses special syntax ${?key} to perform value replacement operations at runtime:
#   ${.key} = Replace this ${} in the string with the value at config[key]
#   ${$key} = Replace this ${} in the string with the environment variable `key`
#   ${?key} = Replace this ${} in the string with the str(return) from function `key` in the registered functions
#   ${!key} = Replace this value with the return from function `key` in the registered functions
#
# Additionally, mlky enables special keys for certain types:
#         \ = mlky.Null, this is equivalent to deleting the key from the config altogether
#
# The "K" column is the key column indicating what type of key this is:
#         ! = This key is required to be manually set
#         ? = This is an optional key under a required section
#   <blank> = Fully optional, can remove from config with no repercussions

generated:                    # K | dtype | Short description
  cores: ${!os.cpu_count}     #   | int   | Number of cores to use for multiprocessing
  log:                        #   | dict  | Controls the logger
    file: timefed.log         #   | str   | File to write log outputs to. Omit to not write to file
    mode: write               #   | str   | File write mode, ie: `write` = overwite the file, `append` = append to existing
    level: DEBUG              #   | str   | Logger level. This is the level that will write to file if enabled
    terminal: ${.log.level}   #   | str   | The terminal level to log, ie. logger level to write to terminal. This can be different than the file level
    mlflow: false             #   | bool  | Enables MLFlow logging
  preprocess:                 #   | dict  | Options for the DSN `preprocess` module
    enabled: true             # ! | bool  | Enables/disables this module in a pipeline execution
    kind: dsn                 # ! | str   | Which preprocess module to use
    file: preprocess.h5       # ! | str   | Path to an H5 file to write to
    tracks: \                 # ! | str   | Path to a DSN tracks file
    drs: \                    # ! | str   | Path to a DSN DRs file
    skip_dcc: false           #   | bool  | Skips tracks with multiple DCC channels
    only:                     #   | dict  | Only process these:
      missions: []            #   | list  | Missions to select in the tracks file
      drs: []                 #   | list  | DRs to select from the DRs file
    features:                 #   | dict  | Creates additional features from a predefined set of functions
      diff: []                #   | list  | Executes DataFrame[feature].diff(): First discrete difference of element
    concat: true              #   | bool  | Enables concatenation of multiple missions' outputs together
    subsample:                #   | dict  | Subsampling strategies to balance the negative:positive ratio in classification cases
      query: \                #   | str   | Passes a query string to DataFrame.query()
      pos_limit: \            #   | int   | Total number of positive tracks to randomly select
      neg_limit: \            #   | int   | Total number of negative tracks to randomly select
      neg_ratio: \            #   | int   | N:1 ratio of negative:positive tracks
  extract:                    #   | dict  | Options for the `extract` module
    enabled: true             # ! | bool  | Enables/disables this module in a pipeline execution
    cores: ${.cores}          #   | int   | Number of cores to use for the extract module
    file: ${.preprocess.file} # ! | str   | Path to an H5 file to write to
    multi: \                  #   |       | Processes a stream of multiple input tracks. This is either a str to which the tracks reside under in the input file, or a list of specific keys in the file to grab
    flush: true               #   | bool  | Flushes processed windows to disk to relieve held memory
    roll:                     #   | dict  | Parameters for the roll function
      window: \               # ! | str   | Size of the windows to extract. The size of these windows is determined by this value divided by the frequency of the data, eg. 10min / 1min = 10 samples. This a is a string compatible with pandas.Timedelta().
      frequency: \            # ! |       | The sampling frequency of the data. If not set, the frequency will be assumed to be the largest quantity of differences between timestamps. This a is a string compatible with pandas.Timedelta().
      step: 1                 #   |       | Size of the step when moving from one window to the next. This can be either an int or a str, where an int would step N many indices from the start of the previous window's start, and str would step N amount of time beyond the start of the previous window's start.
      required: []            #   | list  | List of required variables when rolling. If not provided, defaults to all variables.
      optional: []            #   | list  | List of optional variables when rolling. If not provided, defaults to the opposite of `required`.
    columns: []               #   | list  | Only process these columns through tsfresh extraction. Defaults to all columns if not provided.
    index: -1                 #   | int   | Which index of a window to set as the window index. Defaults to the last index of the window.
    features:                 #   | dict  | Contains the arguments for selecting which tsfresh features to process
      interactive: false      #   | bool  | Enables interactive mode for selection of feature functions from `tsfresh.feature_extraction.ComprehensiveFCParameters`
      whitelist: []           #   | list  | Name of feature functions to accept from `tsfresh.feature_extraction.ComprehensiveFCParameters`
      blacklist: []           #   | list  | Name of feature functions to reject from `tsfresh.feature_extraction.ComprehensiveFCParameters`
  selfeatures:                #   | dict  | Options for the `select features` module
    enabled: true             # ! | bool  | Enables/disables this module in a pipeline execution
    cores: ${.cores}          #   | int   | Number of cores to use for the selfeatures module
    file: ${.preprocess.file} # ! | str   | Path to an H5 file to write to
    drop: []                  #   | list  | Feature columns to drop permanently
    split:                    #   | dict  | Arguments for splitting the data into train and test sets
      train: < 2020           #   | str   | Pandas.query compatible string to select the train set via df.query("index [this str]")
      test: => 2020           #   | str   | Pandas.query compatible string to select the test set via df.query("index [this str]")
  subselect:                  #   | dict  | Options for the `subselect` module
    enabled: true             # ! | bool  | Enables/disables this module in a pipeline execution
    file: ${.preprocess.file} # ! | str   | Path to an H5 file to write to
    cores: ${.cores}
  model:                      #   | dict  | Options for the `model` module
    enabled: true             # ! | bool  | Enables/disables this module in a pipeline execution
    type: regression          # ! | str   | Defines what kind of model this data would use. This influences many functions of TimeFED
    # output: ./timefed_model/  # ! | str   | Output directory to write TimeFED modeling products to. Will attempt to create the directory if it does not exist
    load: false               #   | bool  | Enables loading a present model from the output directory instead of creating a new one
    metadata: metadata.pkl    # ! | str   | Path to a .pkl file to handle classification metadata (not used in regression)
    target: \                 # ! | str   | Name of the target variable
    # fit: true                 #   | bool  | Enables calling model.fit() on the training dataset
    # scores:                   #   | dict  | Options for controlling scoring calculations
      # train: false            #   | bool  | Enables calculating scores on the training dataset
      # test: true              #   | bool  | Enables calculating scores on the testing dataset

mms1:
  base: /Users/jamesmo/projects/timefed/TimeFED/timefed/local/mms
  data: /Users/jamesmo/projects/timefed/TimeFED/timefed/local/data
  log:
    file: ${.base}/mms1.log
    mode: append
  preprocess:
    enabled: true
    file: ${.base}/mms1.h5
    tracks: ${.data}/v4.MMS.tracks.h5
    drs: ${.data}/v3.drs.h5
    only:
      missions:
        - MMS1
      drs:
        - RFI
        - SC
    features:
      diff:
        - CARRIER_SYSTEM_NOISE_TEMP
        - AGC_VOLTAGE
    subsample:
      pos_limit: 100
      neg_ratio: 1
  extract:
    enabled: true
    roll:
      window: 30 min
      frequency: null
    columns:
      - diff_CARRIER_SYSTEM_NOISE_TEMP
      - diff_AGC_VOLTAGE
  selfeatures:
    enabled: false
  subselect:
    enabled: true
    interactive: true
    file: ${.preprocess.file}
    metadata: ${.base}/mms1.metadata.pkl
  model:
    enabled: true
    target: Label
    type: classification
    file: ${.preprocess.file}
    model:
        overwrite: true
        file: ${.base}/mms1.model.pkl
    output:
        model: true
        scores: ${.base}/mms1.scores.pkl
        predicts: ${.base}/mms1.predicts.h5
    train_scores: false

quiet:
  log:
    terminal: INFO
